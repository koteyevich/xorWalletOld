using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using xorWallet.Models;
using xorWallet.Utils;

namespace xorWallet.Processors
{
    public static class StartProcessor
    {
        public static async Task ProcessStartAsync(Message message, TelegramBotClient bot)
        {
            string[]? args = message.Text?.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            if (message.Chat.Type == ChatType.Private)
            {
                if (args is { Length: > 1 })
                {
                    if (args[1].StartsWith("Check_"))
                    {
                        var database = new Database();

                        string checkId = args[1].Replace("Check_", "");
                        var check = await database.GetCheckAsync(checkId);

                        if (check != null)
                        {
                            await checkActivation(message, bot, check, database);
                        }
                        else
                        {
                            throw new Exceptions.Message("Check not found");
                        }
                    }

                    if (args[1].StartsWith("Invoice_"))
                    {
                        var database = new Database();

                        string invoiceId = args[1].Replace("Invoice_", "");
                        var invoice = await database.GetInvoiceAsync(invoiceId);

                        if (invoice != null)
                        {
                            await invoiceActivation(message, bot, invoice);
                        }
                        else
                        {
                            throw new Exceptions.Message("Invoice not found");
                        }
                    }

                    return;
                }

                var db = new Database();
                var user = await db.GetUserAsync(message.From.Id);

                var keyboard = new InlineKeyboardMarkup();
                var balanceButton = new InlineKeyboardButton($"üí∞ –ë–∞–ª–∞–Ω—Å: {user.Balance} XOR", "null");
                keyboard.AddButton(balanceButton);

                var myChecksButton = EncryptedInlineButton.InlineButton("üìã –ú–æ–∏ —á–µ–∫–∏", "myChecks");
                var myInvoicesButton = EncryptedInlineButton.InlineButton("üìä –ú–æ–∏ —Å—á–µ—Ç–∞", "myInvoices");
                keyboard.AddNewRow(myChecksButton, myInvoicesButton);

                var createCheckButton = EncryptedInlineButton.InlineButton("üßæ –°–æ–∑–¥–∞—Ç—å —á–µ–∫", "createCheck");
                var createInvoiceButton = EncryptedInlineButton.InlineButton("üßæ –°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç", "createInvoice");
                keyboard.AddNewRow(createCheckButton, createInvoiceButton);

                await bot.SendMessage(
                    chatId: message.Chat.Id,
                    text: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ xorWallet.\n" +
                          "<i><u>‚ÑπÔ∏è –ü–æ–º–Ω–∏—Ç–µ —á—Ç–æ –≤—Å—è –≤–∞–ª—é—Ç–∞ –≤—ã–º—ã—à–ª–µ–Ω–∞ –∏ –±–µ—Å—Ü–µ–Ω–Ω–∞.</u></i>",
                    parseMode: ParseMode.Html,
                    replyMarkup: keyboard,
                    linkPreviewOptions: new LinkPreviewOptions { IsDisabled = true }
                );
            }
        }

        private static async Task invoiceActivation(Message message, TelegramBotClient bot, Invoice invoice)
        {
            if (invoice.InvoiceOwnerUid == message.From?.Id)
            {
                await invoiceOwner(message, bot, invoice);
                return;
            }

            var keyboard = new InlineKeyboardMarkup();
            var acceptButton =
                EncryptedInlineButton.InlineButton($"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å {invoice.Xors} XOR", $"pay_Invoice_{invoice.Id}");
            var rejectButton = EncryptedInlineButton.InlineButton("‚ùé –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "decline");

            keyboard.AddButton(acceptButton);
            keyboard.AddNewRow(rejectButton);

            await bot.SendMessage(message.Chat.Id, $"üí∞ –°—á—ë—Ç –Ω–∞ {invoice.Xors} XOR", replyMarkup: keyboard);
        }

        private static async Task checkActivation(Message message, TelegramBotClient bot, Check check,
            Database database)
        {
            if (check.CheckOwnerUid == message.From?.Id)
            {
                await checkOwner(message, bot, check);
                return;
            }

            if (check.UserActivated.Any(uid => uid == message.From?.Id))
            {
                throw new Exceptions.Message(
                    "–¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–µ–∫! –û—Å—Ç–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–∏–º...");
            }

            await database.UpdateCheckAsync(check, message.From!.Id);

            var user = await database.GetUserAsync(message.From.Id);
            await bot.SendMessage(message.Chat.Id, $"‚úÖ –ì–æ—Ç–æ–≤–æ!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.Balance} XOR (+ {check.Xors})");
        }

        private static async Task invoiceOwner(Message message, TelegramBotClient bot, Invoice invoice)
        {
            var keyboard = new InlineKeyboardMarkup();
            var revokeCheckButton =
                EncryptedInlineButton.InlineButton("‚¨ÖÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å —Å—á—ë—Ç", $"revokeinvoice_{invoice.Id}");
            var qrButton = EncryptedInlineButton.InlineButton("üî≥ QR", $"qr_Invoice_{invoice.Id}");

            keyboard.AddButtons(revokeCheckButton, qrButton);

            await bot.SendMessage(message.Chat.Id,
                $"üìä –≠—Ç–æ –≤–∞—à —Å—á—ë—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–æ–∑–≤–∞—Ç—å.\n" +
                $"<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å—á—ë—Ç –Ω–∞ {invoice.Xors} XOR?</b>\n\n" +
                $"–ï—Å–ª–∏ –∂–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∑—ã–≤–∞—Ç—å, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–∫–æ–º.\n" +
                $"<code>{StartUrlGenerator.GenerateStartUrl($"Invoice_{invoice.Id}")}</code>",
                parseMode: ParseMode.Html,
                replyMarkup: keyboard);
        }

        private static async Task checkOwner(Message message, TelegramBotClient bot, Check check)
        {
            var keyboard = new InlineKeyboardMarkup();
            var revokeCheckButton =
                EncryptedInlineButton.InlineButton("‚¨ÖÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å —á–µ–∫", $"revokecheck_{check.Id}");
            var qrButton = EncryptedInlineButton.InlineButton("üî≥ QR", $"qr_Check_{check.Id}");

            keyboard.AddButtons(revokeCheckButton, qrButton);

            await bot.SendMessage(message.Chat.Id,
                $"üìã –≠—Ç–æ –≤–∞—à —á–µ–∫, –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–æ–∑–≤–∞—Ç—å.\n" +
                $"–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {check.Activations}\n" +
                $"–ï—Å–ª–∏ –≤—ã —Å–µ–π—á–∞—Å –æ—Ç–∑–æ–≤—ë—Ç–µ —á–µ–∫, —Ç–æ –≤–µ—Ä–Ω—ë—Ç–µ —Å–µ–±–µ <b>{check.Activations * check.Xors}</b> XOR\n\n" +
                $"–ï—Å–ª–∏ –∂–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∑—ã–≤–∞—Ç—å, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–∫–æ–º.\n" +
                $"<code>{StartUrlGenerator.GenerateStartUrl($"Check_{check.Id}")}</code>",
                parseMode: ParseMode.Html,
                replyMarkup: keyboard);
        }
    }
}
