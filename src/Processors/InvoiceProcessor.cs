using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using xorWallet.Utils;

namespace xorWallet.Processors
{
    public abstract class InvoiceProcessor
    {
        public static async Task InvoiceAsync(Message message, TelegramBotClient bot)
        {
            var db = new Database();
            string[] args = message.Text!.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            if (args.Length < 2)
            {
                throw new ArgumentException(
                    "–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /invoice 10 (xors)");
            }

            long userId = message.From!.Id;
            int xors = int.Parse(args[1]);

            if (xors <= 0)
            {
                throw new ArgumentException("XOR –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0");
            }

            string invoice = await db.CreateInvoiceAsync(userId, xors);

            var botMessage = new StringBuilder();
            botMessage.AppendLine("‚úÖ –ì–æ—Ç–æ–≤–æ!");
            botMessage.AppendLine(
                $"‚û°Ô∏è –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>https://t.me/xorwallet_bot?start={invoice}</code>");

            var keyboard = new InlineKeyboardMarkup();
            var qrButton = EncryptedInlineButton.InlineButton("üî≥ QR", $"qr_{invoice}");

            keyboard.AddButton(qrButton);

            await bot.SendMessage(message.Chat.Id, botMessage.ToString(), ParseMode.Html, replyMarkup: keyboard);
        }
    }
}
