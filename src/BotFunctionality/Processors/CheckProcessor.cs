using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using xorWallet.Utils;

namespace xorWallet.BotFunctionality.Processors
{
    public abstract class CheckProcessor
    {
        /// <summary>
        /// Command that is used to generate checks. Checks need 2 things: number of XORs, and number of activations.
        /// If those parameters are given and correct, generate the check.
        /// After the creation on the backend, the message about success is sent.
        /// </summary>
        /// <param name="message">Used to get the userID and chatID. Also used to get the message text to split it into arguments that are used when creating the check.</param>
        /// <param name="bot">Used for sending messages.</param>
        /// <exception cref="Message">(can't reference the correct message...) If the arguments are incorrect.</exception>
        public static async Task CheckAsync(Message message, TelegramBotClient bot)
        {
            var db = new Database();
            string[] args = message.Text!.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            if (args.Length < 3)
            {
                throw new Exceptions.Message(
                    "–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /check 10 (xors) 4 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π)");
            }

            long userId = message.From!.Id;
            int xors = int.Parse(args[1]);
            int activations = int.Parse(args[2]);

            if (activations <= 0)
            {
                throw new Exceptions.Message("–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0");
            }

            if (xors <= 0)
            {
                throw new Exceptions.Message("XOR –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0");
            }

            string check = await db.CreateCheckAsync(userId, xors, activations);
            var user = await db.GetUserAsync(userId);

            var botMessage = new StringBuilder();
            botMessage.AppendLine("‚úÖ –ì–æ—Ç–æ–≤–æ!");
            botMessage.AppendLine(
                $"‚û°Ô∏è –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <code>{StartUrlGenerator.GenerateStartUrl(check)}</code>");
            botMessage.AppendLine($"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.Balance} XOR (- {xors * activations})");

            var keyboard = new InlineKeyboardMarkup();
            var qrButton = EncryptedInlineButton.InlineButton("üî≥ QR", $"qr_{check}");

            keyboard.AddButton(qrButton);

            await bot.SendMessage(message.Chat.Id, botMessage.ToString(), ParseMode.Html, replyMarkup: keyboard);
        }
    }
}
